"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8162],{8631:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(4848),s=n(8453);const a={},o="Arr",l={id:"resources/support/arr",title:"Arr",description:"The Arr methods are focused on manipulating arrays.",source:"@site/docs/resources/support/arr.md",sourceDirName:"resources/support",slug:"/resources/support/arr",permalink:"/docs/resources/support/arr",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/resources/support/arr.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Support",permalink:"/docs/category/support"},next:{title:"Bool",permalink:"/docs/resources/support/bool"}},i={},c=[{value:"Dot notation keys",id:"dot-notation-keys",level:2},{value:"Creating constants",id:"creating-constants",level:2},{value:"Methods",id:"methods",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"arr",children:"Arr"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"Arr"})," methods are focused on manipulating arrays."]}),"\n",(0,r.jsx)(t.p,{children:"This class was inspired by the PHP Laravel's class and attempts to provide\r\nsimilar resources to work with arrays. Of course, Lua tables and PHP arrays\r\nare different things, but from a development standpoint, they can work\r\nsimilarly."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Arr"})," methods are tested by ",(0,r.jsx)(t.code,{children:"tests\\Support\\ArrTest.lua"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"dot-notation-keys",children:"Dot notation keys"}),"\n",(0,r.jsxs)(t.p,{children:["Some ",(0,r.jsx)(t.strong,{children:"Arr"})," methods accept dot notation keys, which are keys condensed in\r\na string that are interpreted as nested keys. In World of Warcraft, addon\r\ndata is usually stored in tables that and their values are retrieved from\r\nnested tables."]}),"\n",(0,r.jsx)(t.p,{children:"The dot notation comes in handy to improve readness and also avoid\r\nrepetitive loops."}),"\n",(0,r.jsx)(t.p,{children:"Here's an example of how dot notation keys work. Imagine a list created\r\nwith the following nested lists:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:"local list = {}\r\nlist['root'] = {}\r\n\r\nlist['root']['level1-a'] = {}\r\nlist['root']['level1-b'] = {}\r\nlist['root']['level1-c'] = {}\r\n\r\nlist['root']['level1-a']['level2'] = 'some-value'\n"})}),"\n",(0,r.jsxs)(t.p,{children:["In order to get the last level value, a ",(0,r.jsx)(t.code,{children:"list['root']['level1-a']['level2']"}),"\r\ncall is made, that could also throw errors if any of the indexes don't\r\nexist."]}),"\n",(0,r.jsxs)(t.p,{children:["With ",(0,r.jsx)(t.code,{children:"Arr:get()"})," it's possible to run:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:"local value = Arr:get(list, 'root.level1-a.level2', 'default-value')\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The code above will return the nested value ",(0,r.jsx)(t.strong,{children:"OR"})," the default value passed\r\nas the third argument. If no default value is provided, ",(0,r.jsx)(t.code,{children:"nil"})," will be\r\nreturned, but the most important thing here is that no errors will be throw\r\nby accessing invalid properties inside a table."]}),"\n",(0,r.jsxs)(t.p,{children:["On the other hand, ",(0,r.jsx)(t.code,{children:"Arr:set()"})," can create those levels with a single line,\r\nwith no need to iterate over the table and create the indexes that aren't\r\ncreated yet."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:"Arr:set(list, 'root.level1-b.level2', 'another-value')\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The code above is the same as doing ",(0,r.jsx)(t.code,{children:"list['root']['level1-b']['level2']"}),",\r\nhowever, if ",(0,r.jsx)(t.code,{children:"root"})," or ",(0,r.jsx)(t.code,{children:"level1-b"})," are ",(0,r.jsx)(t.code,{children:"nil"}),", they'll be created as ",(0,r.jsx)(t.code,{children:"{}"})," until\r\nreaching the last key."]}),"\n",(0,r.jsxs)(t.admonition,{title:"Careful with dot notation keys containing numbers",type:"warning",children:[(0,r.jsxs)(t.p,{children:["When retrieving values from a table using dot notation keys, it's possible to\r\nuse numbers as keys. Methods like ",(0,r.jsx)(t.code,{children:"Arr:get()"})," and ",(0,r.jsx)(t.code,{children:"Arr:hasKey()"})," plus others\r\nthat don't set values, will be able to return a value whether the key is a\r\nnumber or a string."]}),(0,r.jsxs)(t.p,{children:["As an example, calling ",(0,r.jsx)(t.code,{children:"Arr:get()"})," with the following tables..."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:"local listA = {['a'] = {['1'] = 'value'}}\r\nlocal listB = {['a'] = {'value'}}\n"})}),(0,r.jsxs)(t.p,{children:["...will return the same value when passing ",(0,r.jsx)(t.code,{children:"'a.1'"})," as the key."]}),(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"However"}),", when setting values with ",(0,r.jsx)(t.code,{children:"Arr:set()"}),", the keys will always be\r\nconsidered a string. So when calling ",(0,r.jsx)(t.code,{children:"Arr:set(list, 'a.1', 'value')"}),", the\r\nresult will be:"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:"local list = {['a'] = {['1'] = 'value'}}\n"})}),(0,r.jsx)(t.p,{children:"That's the behavior adopted to avoid questions about the type of the keys,\r\nconsidering that when retrieving, the library can check both types and return\r\nthe value, but when setting, it's not possible to imagine what's the intention\r\nof the developer."}),(0,r.jsxs)(t.p,{children:["As a final note, for edge cases where a table contains both a string and the\r\nsame number as keys, ",(0,r.jsx)(t.code,{children:"Arr:get()"})," will return the value of the string key."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:"local list = {['a'] = {'another-value', ['1'] = 'value'}}\r\n\r\n-- return will be 'value'\r\nArr:get(list, 'a.1')\n"})})]}),"\n",(0,r.jsx)(t.h2,{id:"creating-constants",children:"Creating constants"}),"\n",(0,r.jsx)(t.p,{children:"Lua doesn't have a native way to create constants, but it's possible to\r\nmimic this behavior by using tables and metatables."}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"Arr:freeze()"})," method is a helper to create a table with read-only\r\nproperties. And that's achieved by setting a metatable that will throw an\r\nerror when trying to set a new value to the table."]}),"\n",(0,r.jsx)(t.p,{children:"Here's an example of how to create a constant table:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:"local constants = Arr:freeze({\r\n    MY_CONSTANT_NAME = 'my-constant-value',\r\n})\r\n\r\n-- this will print 'my-constant-value'\r\nprint(constants.MY_CONSTANT_NAME)\r\n\r\n-- this will throw an error\r\nconstants.MY_CONSTANT_NAME = 'new-value'\n"})}),"\n",(0,r.jsxs)(t.admonition,{type:"tip",children:[(0,r.jsxs)(t.mdxAdmonitionTitle,{children:["Prefer to use tables named ",(0,r.jsx)(t.code,{children:"constants"})]}),(0,r.jsx)(t.p,{children:"In a programming language that supports constants, it's common to declare\r\nthem in uppercase at the beginning of a class. At the same time, with the\r\nfreeze function it's possible to have multiple constant tables anywhere."}),(0,r.jsxs)(t.p,{children:["In Stormwind Library, it's considered a good practice to group all constants\r\nin a table called ",(0,r.jsx)(t.code,{children:"constants"})," right after a ",(0,r.jsx)(t.a,{href:"/docs/resources/core/classes",children:"class"}),"\r\ndeclaration, even if the constants are not totally related with each other."]}),(0,r.jsx)(t.p,{children:"Using this as a convention, Stormwind Library can provide a similar\r\nexperience and making it clear that the table is a list of constants."})]}),"\n",(0,r.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsxs)(t.p,{children:["Please, refer to the ",(0,r.jsx)(t.a,{href:"pathname:///lua-docs/classes/Support.Arr.html",children:"technical documentation"}),"\r\nto get more information about this class and its methods."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var r=n(6540);const s={},a=r.createContext(s);function o(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);