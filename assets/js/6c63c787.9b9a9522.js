"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3766],{6180:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=t(4848),a=t(8453);const o={},i="Configuration",s={id:"resources/core/configuration",title:"Configuration",description:"The Configuration class provides methods to easily access and manipulate the",source:"@site/docs/resources/core/configuration.md",sourceDirName:"resources/core",slug:"/resources/core/configuration",permalink:"/docs/resources/core/configuration",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/resources/core/configuration.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Classes",permalink:"/docs/resources/core/classes"},next:{title:"Environment",permalink:"/docs/resources/core/environment"}},c={},l=[{value:"Creating a configuration",id:"creating-a-configuration",level:2},{value:"Accessing the configuration",id:"accessing-the-configuration",level:2},{value:"Setting a prefix key",id:"setting-a-prefix-key",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(n.p,{children:"The Configuration class provides methods to easily access and manipulate the\r\nconfiguration properties. That reduces the need to pollute the addon code\r\nwith sanity checks, index initializations, etc."}),"\n",(0,r.jsxs)(n.p,{children:["Along with the Configuration class, the library provides two proxy methods\r\ncalled ",(0,r.jsx)(n.code,{children:"config(...)"})," and ",(0,r.jsx)(n.code,{children:"playerConfig(...)"})," that allow the addon to access\r\nthe global and player configuration properties in a more readable way."]}),"\n",(0,r.jsx)(n.p,{children:"That way, addons can access configuration properties without touching the\r\nsaved variables directly, making the code more readable and maintainable."}),"\n",(0,r.jsxs)(n.admonition,{title:"Configuration and settings",type:"tip",children:[(0,r.jsx)(n.p,{children:"Be aware the configurations are not the same as settings."}),(0,r.jsx)(n.p,{children:"Configurations can be values that are not meant to be changed by the user,\r\nlike constants, or values that are set by the addon itself."}),(0,r.jsxs)(n.p,{children:["Settings are a ",(0,r.jsx)(n.strong,{children:"subset"})," of configurations that are meant to be changed by\r\nthe user. That said, the Configuration class is also used to handle the\r\nsettings if the addon developer wants to, but not restricted to that."]})]}),"\n",(0,r.jsx)(n.h2,{id:"creating-a-configuration",children:"Creating a configuration"}),"\n",(0,r.jsxs)(n.p,{children:["To create a new configuration instance, it's required to pass a table to its\r\nconstructor. This can be any table, persistent or not, that will be used to\r\nstore the configuration properties. However, it's highly recommended to use\r\nthe ",(0,r.jsx)(n.strong,{children:"saved variables table"})," to store the configuration properties."]}),"\n",(0,r.jsx)(n.p,{children:"After that, the addon can access the configuration properties using the\r\nConfiguration setters and getters."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," For a detailed explanation of the Configuration accessors, read the\r\n",(0,r.jsx)(n.a,{href:"pathname:///lua-docs/classes/Core.Configuration.html",children:"technical documentation"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local configTable = {}\r\n\r\nlocal config = library:new('Configuration', configTable)\r\n\r\n-- now, any configuration property is set or retrieved using the config\r\n-- instance that will affect the configTable instance\n"})}),"\n",(0,r.jsx)(n.p,{children:"The example above works for any table, but as mentioned, it's recommended to\r\npass the saved variables table to the Configuration constructor, that way,\r\nwhen a configuration or setting is changed, it will be automatically saved\r\nwhen the game is closed or reloaded."}),"\n",(0,r.jsx)(n.p,{children:"So, based on the TOC file below..."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toc",children:"## Author: ...\r\n## Interface: ...\r\n## SavedVariables: MyAddon_Data\r\n## ...\n"})}),"\n",(0,r.jsx)(n.p,{children:"...this is how the configuration instance should be created:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local config = library:new('Configuration', MyAddon_Data)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"accessing-the-configuration",children:"Accessing the configuration"}),"\n",(0,r.jsxs)(n.p,{children:["The Configuration class offers a set of methods to access the configuration\r\nproperties. Those are better explained in the ",(0,r.jsx)(n.a,{href:"pathname:///lua-docs/classes/Core.Configuration.html",children:"technical documentation"}),"\r\nand should be used only if the addon needs to have multiple configurations\r\ntables."]}),"\n",(0,r.jsxs)(n.p,{children:["In most of the cases, when the addon has only one configuration table, the\r\n",(0,r.jsx)(n.strong,{children:"library will automatically instantiate the Configuration class"})," for\r\n",(0,r.jsx)(n.strong,{children:"global"})," and ",(0,r.jsx)(n.strong,{children:"player"})," contexts, making it available through the\r\n",(0,r.jsx)(n.code,{children:"config(...)"})," and ",(0,r.jsx)(n.code,{children:"playerConfig(...)"})," proxy methods."]}),"\n",(0,r.jsxs)(n.p,{children:["To achieve that, the addon must pass the saved variables table name to the\r\n",(0,r.jsx)(n.a,{href:"/docs/resources/core/addon-properties",children:"library properties"})," with the ",(0,r.jsx)(n.code,{children:"data"}),"\r\nkey."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local __ = StormwindLibrary.new({\r\n  -- colors = {\r\n    -- primary = '...'\r\n  --},\r\n  -- command = 'mycommand',\r\n  -- name = 'MyAddon'\r\n  data = 'MyAddon_Data'\r\n})\n"})}),"\n",(0,r.jsx)(n.p,{children:"After that, both methods method will be available to access the configuration\r\nproperties in the following combination of parameters:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"config('dot.notation.key')"})," - retrieves the value of the key or ",(0,r.jsx)(n.code,{children:"nil"})," if\r\nthe key is not found"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"config('dot.notation.key', defaultValue)"})," - retrieves the value of the key\r\nor the default value if the key is not found"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"config('dot.notation.key', defaultValue, true)"})," - retrieves the value of\r\nthe key; ",(0,r.jsx)(n.strong,{children:"or"})," sets the default value if the key is not found, returning it\r\nafter that"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"config({['property.a'] = 'value', ['property.b'] = 'value'})"})," - sets the\r\nvalues of the keys in the table"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Replace the ",(0,r.jsx)(n.code,{children:"config"})," calls above with ",(0,r.jsx)(n.code,{children:"playerConfig"})," to access the\r\nspecific player configuration properties."]}),"\n",(0,r.jsx)(n.p,{children:"Examples:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- addon data stored as MyAddon_Data\r\nMyAddon_Data = {\r\n  property = {\r\n    a = 'value-a',\r\n    b = 'value-b'\r\n  }\r\n}\r\n\r\n-- returns 'value-a'\r\nlibrary:config('property.a')\r\n\r\n-- returns 'value-c', but the key is not added\r\nlibrary:config('property.c', 'value-c')\r\n\r\n-- returns 'value-c' and adds the new key\r\nlibrary:config('property.c', 'value-c', true)\r\n\r\n-- this is the data after the last call\r\nMyAddon_Data = {\r\n  property = {\r\n    a = 'value-a',\r\n    b = 'value-b',\r\n    c = 'value-c'\r\n  }\r\n}\r\n\r\n-- sets the new values\r\nlibrary:config({\r\n  ['property.a'] = 'new-value-a',\r\n  ['property.b'] = 'new-value-b'\r\n})\r\n\r\n-- this is the data after the last call\r\nMyAddon_Data = {\r\n  property = {\r\n    a = 'new-value-a',\r\n    b = 'new-value-b',\r\n    c = 'value-c'\r\n  }\r\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"setting-a-prefix-key",children:"Setting a prefix key"}),"\n",(0,r.jsx)(n.p,{children:"When creating a new configuration instance, it's possible to set a prefix key\r\nthat will be used to prefix all the keys in the configuration table."}),"\n",(0,r.jsx)(n.p,{children:"This is useful when the addon needs to have same configurations for multiple\r\ncontexts, like different profiles, characters, etc."}),"\n",(0,r.jsxs)(n.p,{children:["The prefix can be anything, even a dot notation string, ",(0,r.jsx)(n.strong,{children:"as long as it\r\ndoesn't end with a dot"}),", considering that the prefix will be placed before\r\nany keys being accessed separately by a dot."]}),"\n",(0,r.jsx)(n.p,{children:"If no prefix is set, the Configuration class will not prefix the keys, and\r\nthat's the default state of this class."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local config = library:new('Configuration', MyAddon_Data)\r\n\r\n-- this will try to access the key 'property.a' in the MyAddonData table\r\nconfig('property.a')\r\n\r\n-- setting a prefix key\r\nconfig:setPrefix('any.prefix')\r\n\r\n-- after the prefix is set, calling...\r\nconfig('property.a')\r\n\r\n-- ...will have the configuration instance trying to access the key\r\n-- 'any.prefix.property.a' in the MyAddonData table\r\n-- MyAddonData['any']['prefix']['property']['a']\n"})}),"\n",(0,r.jsxs)(n.admonition,{title:"Default configuration instance",type:"warning",children:[(0,r.jsxs)(n.p,{children:["The library default configuration instance ",(0,r.jsx)(n.strong,{children:"doesn't have a prefix key"}),". That\r\nmeans the ",(0,r.jsx)(n.code,{children:"config(...)"})," method will try to access the keys directly in the\r\nsaved variables table and considered as a way to access ",(0,r.jsx)(n.strong,{children:"global"}),"\r\nconfiguration values, regardless of players, realms, etc."]}),(0,r.jsxs)(n.p,{children:["Of course, by ",(0,r.jsx)(n.strong,{children:"global"})," it means the ",(0,r.jsx)(n.strong,{children:"root"})," index in the saved variables\r\ntable itself, not the global environment or the ",(0,r.jsx)(n.code,{children:"_G"})," table. It's global in\r\nthe addon context."]}),(0,r.jsxs)(n.p,{children:["On the other hand, the ",(0,r.jsx)(n.code,{children:"playerConfig(...)"})," method will proxy to a\r\nconfiguration instance that had being created with player realm and name as\r\nthe prefix key, allowing the addon to have different configurations for each\r\nplayer."]})]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var r=t(6540);const a={},o=r.createContext(a);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);