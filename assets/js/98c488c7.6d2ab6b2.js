"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[567],{5324:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var r=t(4848),s=t(8453);const i={sidebar_position:3,title:"Implementation"},o=void 0,a={id:"development-process/implementation",title:"Implementation",description:"The implementation phase starts by creating a new release branch that will be used as the base",source:"@site/docs/development-process/implementation.md",sourceDirName:"development-process",slug:"/development-process/implementation",permalink:"/docs/development-process/implementation",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/development-process/implementation.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Implementation"},sidebar:"tutorialSidebar",previous:{title:"Discovery",permalink:"/docs/development-process/discovery"},next:{title:"Deployment",permalink:"/docs/development-process/deployment"}},l={},d=[];function c(e){const n={code:"code",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"The implementation phase starts by creating a new release branch that will be used as the base\r\nbranch for all the new version features."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Checkout ",(0,r.jsx)(n.code,{children:"main"})," and pull the latest changes"]}),"\n",(0,r.jsxs)(n.li,{children:["Create a new branch named ",(0,r.jsx)(n.code,{children:"release/version-x.y.0"})," where ",(0,r.jsx)(n.code,{children:"x"})," is the major version and ",(0,r.jsx)(n.code,{children:"y"})," is\r\nthe minor version"]}),"\n",(0,r.jsxs)(n.li,{children:["Open the ",(0,r.jsx)(n.code,{children:"src\\stormwind-library.lua"})," file and update the version number in the comment where\r\nit is defined","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- Library version = 'x.y.0'\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Open the ",(0,r.jsx)(n.code,{children:"tests\\unit.lua"})," file and update the version number in the library class name, where\r\nits instance is referenced","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"dofile('./dist/stormwind-library.lua')\r\nStormwindLibrary = StormwindLibrary_vx_y_0\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Open the ",(0,r.jsx)(n.code,{children:"documentation\\docs\\changelog.md"})," file and add a new line with the new version\r\nnumber and a placeholder release date","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-markdown",children:"## yyyy.mm.dd - version x.y.0\n"})}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Build the library and run the unit tests to make sure nothing is broken"}),"\n",(0,r.jsxs)(n.li,{children:["Commit the changes with a message like ",(0,r.jsx)(n.code,{children:"Bump version to x.y.0"})," and push the branch to the\r\nrepository"]}),"\n",(0,r.jsxs)(n.li,{children:["Open a Pull Request with ",(0,r.jsx)(n.code,{children:"Release - vx.y.0"})," as the title"]}),"\n",(0,r.jsx)(n.li,{children:"From now, every new implementation should be created in a new branch from the release branch"}),"\n",(0,r.jsx)(n.li,{children:"The release PR will be merged in the deployment phase, when all the features are implemented,\r\nreviewed, and tested"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);