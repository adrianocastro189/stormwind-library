"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9484],{1410:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var s=t(4848),r=t(8453);const i={},a="Events",l={id:"resources/facades/events",title:"Events",description:"The Events facade is an important class in the Stormwind Library, as it",source:"@site/docs/resources/facades/events.md",sourceDirName:"resources/facades",slug:"/resources/facades/events",permalink:"/docs/resources/facades/events",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/resources/facades/events.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Facades",permalink:"/docs/category/facades"},next:{title:"PetJournal",permalink:"/docs/resources/facades/pet-journal"}},d={},o=[{value:"How to get the Events instance",id:"how-to-get-the-events-instance",level:2},{value:"How to listen to a Stormwind Library event",id:"how-to-listen-to-a-stormwind-library-event",level:2},{value:"Available events",id:"available-events",level:3},{value:"<code>PLAYER_ENTERED_COMBAT</code>",id:"player_entered_combat",level:4},{value:"<code>PLAYER_LEFT_COMBAT</code>",id:"player_left_combat",level:4},{value:"<code>PLAYER_LEVEL_UP</code>",id:"player_level_up",level:4},{value:"<code>PLAYER_LOGIN</code>",id:"player_login",level:4},{value:"<code>PLAYER_TARGET</code>",id:"player_target",level:4},{value:"<code>PLAYER_TARGET_CHANGED</code>",id:"player_target_changed",level:4},{value:"<code>PLAYER_TARGET_CLEAR</code>",id:"player_target_clear",level:4},{value:"<code>SETTING_UPDATED</code>",id:"setting_updated",level:4},{value:"<code>TOOLTIP_ITEM_SHOWN</code>",id:"tooltip_item_shown",level:4},{value:"<code>TOOLTIP_UNIT_SHOWN</code>",id:"tooltip_unit_shown",level:4},{value:"How does this facade works",id:"how-does-this-facade-works",level:2},{value:"The Events Frame",id:"the-events-frame",level:3},{value:"The main library callback method",id:"the-main-library-callback-method",level:3},{value:"The library handlers",id:"the-library-handlers",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"events",children:"Events"})}),"\n",(0,s.jsx)(n.p,{children:"The Events facade is an important class in the Stormwind Library, as it\r\nis responsible for capturing all World of Warcraft events and forwarding\r\nthem to the library handlers."}),"\n",(0,s.jsx)(n.p,{children:"Its motivation is to provide a more detailed and mapped event system to\r\nthe addons, which can listen to the library events instead of the World\r\nof Warcraft events. This way, the library can provide events data with the\r\nmapped models, in a more OOP way."}),"\n",(0,s.jsx)(n.p,{children:"Some events in World of Warcraft are not entirely related to what really\r\nhappened in the game and require some processing to be useful, especially\r\nwhen they need to work with flags, states, and other complex data. That\r\nsaid, the Stormwind Library attempts to perform this processing and\r\nbroadcast its own events, with its own data."}),"\n",(0,s.jsx)(n.p,{children:"Finally, another motivation behind this facade is to ease on addons\r\nmaintenance when Blizzard changes the game events, as the library will keep\r\nbroadcasting the same events, with the same data, unless those changes\r\nresult in something that can't be determined anymore."}),"\n",(0,s.jsx)(n.h2,{id:"how-to-get-the-events-instance",children:"How to get the Events instance"}),"\n",(0,s.jsxs)(n.p,{children:["The Events facade instance is available in the Stormwind Library instance\r\nunder the ",(0,s.jsx)(n.code,{children:"events"})," property and it's already initialized when the library\r\nis loaded."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"local events = library.events\n"})}),"\n",(0,s.jsx)(n.h2,{id:"how-to-listen-to-a-stormwind-library-event",children:"How to listen to a Stormwind Library event"}),"\n",(0,s.jsxs)(n.p,{children:["To listen to a Stormwind Library event, you should use the ",(0,s.jsx)(n.code,{children:"listen"})," method\r\nfrom the Events class. This method receives two parameters: the event name\r\nand the callback to be called when the event is triggered."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"library.events:listen('SOME_STORMWIND_LIBRARY_EVENT_NAME', function (param)\r\n    print(param)\r\nend)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"available-events",children:"Available events"}),"\n",(0,s.jsx)(n.p,{children:"Stormwind Library event names have constants to avoid typos and to make it\r\neasier to track their usage."}),"\n",(0,s.jsx)(n.p,{children:"Every handler should register one or more event names to the main Events\r\nclass, which means the facade instance can be inspected to check which\r\nevents can be watched."}),"\n",(0,s.jsxs)(n.p,{children:["These are the available Stormwind Library events to be listened by addons\r\nwith the ",(0,s.jsx)(n.code,{children:"Events:listen(event, callback)"})," method. It's advisable to use\r\nthe constants defined in the Stormwind Library to avoid typos and to make\r\nthe code more readable."]}),"\n",(0,s.jsx)(n.h4,{id:"player_entered_combat",children:(0,s.jsx)(n.code,{children:"PLAYER_ENTERED_COMBAT"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Constant:"})," ",(0,s.jsx)(n.code,{children:"library.events.EVENT_NAME_PLAYER_ENTERED_COMBAT"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Payload:"})," No data is sent with this event"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description:"})," Facade for the disable regen event, which is triggered\r\nwhen the player enters combat."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Notes:"})," The motivation behind this event is to provide a more intuitive\r\nname for listeners."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Since:"})," 1.7.0"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"player_left_combat",children:(0,s.jsx)(n.code,{children:"PLAYER_LEFT_COMBAT"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Constant:"})," ",(0,s.jsx)(n.code,{children:"library.events.EVENT_NAME_PLAYER_LEFT_COMBAT"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Payload:"})," No data is sent with this event"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description:"})," Facade for the enable regen event, which is triggered\r\nwhen the player leaves combat."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Notes:"})," The motivation behind this event is to provide a more intuitive\r\nname for listeners."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Since:"})," 1.7.0"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"player_level_up",children:(0,s.jsx)(n.code,{children:"PLAYER_LEVEL_UP"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Constant:"})," ",(0,s.jsx)(n.code,{children:"library.events.EVENT_NAME_PLAYER_LEVEL_UP"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Payload:"})," An integer with the ",(0,s.jsx)(n.strong,{children:"new"})," player level"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description:"})," This event is the same as the World of Warcraft event\r\ncalled ",(0,s.jsx)(n.code,{children:"PLAYER_LEVEL_UP"}),", but with fewer data."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Notes:"})," Before broadcasting this event, the\r\n",(0,s.jsx)(n.a,{href:"../models/player#getting-the-current-player-instance",children:"library current player"}),"\r\ninstance will be updated with the new level."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"player_login",children:(0,s.jsx)(n.code,{children:"PLAYER_LOGIN"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Constant:"})," ",(0,s.jsx)(n.code,{children:"library.events.EVENT_NAME_PLAYER_LOGIN"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Payload:"})," No data is sent with this event"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description:"})," This event is the same as the World of Warcraft event\r\ncalled ",(0,s.jsx)(n.code,{children:"PLAYER_LOGIN"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"player_target",children:(0,s.jsx)(n.code,{children:"PLAYER_TARGET"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Constant:"})," ",(0,s.jsx)(n.code,{children:"library.events.EVENT_NAME_PLAYER_TARGET"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Payload:"})," No data is sent with this event"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description:"})," Triggered when a player targets a unit but had no\r\ntarget before."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"player_target_changed",children:(0,s.jsx)(n.code,{children:"PLAYER_TARGET_CHANGED"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Constant:"})," ",(0,s.jsx)(n.code,{children:"library.events.EVENT_NAME_PLAYER_TARGET_CHANGED"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Payload:"})," No data is sent with this event"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description:"})," Triggered when a player changes its current target."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"player_target_clear",children:(0,s.jsx)(n.code,{children:"PLAYER_TARGET_CLEAR"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Constant:"})," ",(0,s.jsx)(n.code,{children:"library.events.EVENT_NAME_PLAYER_TARGET_CLEAR"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Payload:"})," No data is sent with this event"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description:"})," Triggered when a player clears the target."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"setting_updated",children:(0,s.jsx)(n.code,{children:"SETTING_UPDATED"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Constant:"})," (none)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Payload:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"id"})," - The setting ",(0,s.jsx)(n.strong,{children:"full qualified id"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"oldValue"})," - The old setting value before the update"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"newValue"})," - The new setting value after the update"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description:"})," Triggered when a setting is updated using the\r\n",(0,s.jsx)(n.a,{href:"../core/settings",children:"settings structure"}),". This event is not related to the World of\r\nWarcraft events, but to the library settings system."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"tooltip_item_shown",children:(0,s.jsx)(n.code,{children:"TOOLTIP_ITEM_SHOWN"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Constant:"})," (not available yet)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Payload:"})," ",(0,s.jsx)(n.a,{href:"../models/item",children:"Item"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description:"})," Triggered when an item tooltip is shown."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"tooltip_unit_shown",children:(0,s.jsx)(n.code,{children:"TOOLTIP_UNIT_SHOWN"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Constant:"})," (not available yet)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Payload:"})," No data is sent with this event"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description:"})," Triggered when a unit tooltip is shown."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"how-does-this-facade-works",children:"How does this facade works"}),"\n",(0,s.jsx)(n.p,{children:"This section is intended to explain how the Events facade works, and how\r\nnew events can be added to the library. It's focused on developers who\r\nwant to improve the library by adding new events or modifying existing\r\nones."}),"\n",(0,s.jsx)(n.h3,{id:"the-events-frame",children:"The Events Frame"}),"\n",(0,s.jsxs)(n.p,{children:["Once instantiated, the Events class creates a frame that will start to\r\nlisten to all World of Warcraft events. A script is attached to this\r\nframe's ",(0,s.jsx)(n.code,{children:"OnEvent"})," event."]}),"\n",(0,s.jsx)(n.p,{children:"In the Stormwind Library context, this frame will be responsible for\r\ncapturing all World of Warcraft events and forwarding them to the library\r\nhandlers."}),"\n",(0,s.jsx)(n.h3,{id:"the-main-library-callback-method",children:"The main library callback method"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Events:handleOriginal()"})," method is called whenever a World of Warcraft\r\nevent is triggered. It will check if there is a callback registered for\r\nthat event and, if so, it will call it."]}),"\n",(0,s.jsx)(n.p,{children:"This is where the event is redirected to the library handlers."}),"\n",(0,s.jsx)(n.h3,{id:"the-library-handlers",children:"The library handlers"}),"\n",(0,s.jsx)(n.p,{children:"The library handlers are the callbacks registered to handle World of\r\nWarcraft events."}),"\n",(0,s.jsxs)(n.p,{children:["They're created in the ",(0,s.jsx)(n.code,{children:"src/Facades/EventHandlers"})," folder and will\r\nbasically use an anonymous function or create a callback function, which\r\nmost of the times will be part of the ",(0,s.jsx)(n.code,{children:"Events"})," class and call the\r\n",(0,s.jsx)(n.code,{children:"Events:listenOriginal()"})," method, passing the ",(0,s.jsx)(n.strong,{children:"World of Warcraft event\r\nname"})," and this callback."]}),"\n",(0,s.jsx)(n.admonition,{title:"The listener suffix",type:"note",children:(0,s.jsxs)(n.p,{children:["When attaching a method to the Events class, use the ",(0,s.jsx)(n.code,{children:"listener"})," suffix as\r\na convention to indicate that the method is a listener."]})}),"\n",(0,s.jsxs)(n.p,{children:["The callback implementation performs all the necessary logic to handle the\r\nevent, like setting flags, states, etc, and then calls the ",(0,s.jsx)(n.code,{children:"Events:notify()"}),"\r\nmethod passing the ",(0,s.jsx)(n.strong,{children:"Stormwind Library event name"})," and the parameters to be\r\nforwarded to the library listeners."]}),"\n",(0,s.jsx)(n.admonition,{title:"Handling event states",type:"tip",children:(0,s.jsxs)(n.p,{children:["Although handlers are free to manage states as they want, there's a\r\nproperty in ",(0,s.jsx)(n.code,{children:"Events"})," called ",(0,s.jsx)(n.code,{children:"eventStates"})," that can be used to store simple\r\nflags and other properties to centralize the state management and also\r\nallow handlers to communicate with each other if necessary."]})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var s=t(6540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);