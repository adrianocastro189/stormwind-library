"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9572],{1570:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>h});var t=i(4848),s=i(8453);const o={},r="Minimap Icon",c={id:"resources/views/minimap-icon",title:"Minimap Icon",description:"The minimap icon is a small icon that appears in the top right corner of the screen",source:"@site/docs/resources/views/minimap-icon.md",sourceDirName:"resources/views",slug:"/resources/views/minimap-icon",permalink:"/docs/resources/views/minimap-icon",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/resources/views/minimap-icon.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Views",permalink:"/docs/category/views"},next:{title:"View Constants",permalink:"/docs/resources/views/view-constants"}},a={},h=[{value:"Usage",id:"usage",level:2},{value:"Moving the icon",id:"moving-the-icon",level:2},{value:"Showing and hiding the minimap icon",id:"showing-and-hiding-the-minimap-icon",level:2},{value:"Persisting the icon state",id:"persisting-the-icon-state",level:2}];function l(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"minimap-icon",children:"Minimap Icon"}),"\n",(0,t.jsx)(n.p,{children:"The minimap icon is a small icon that appears in the top right corner of the screen\r\naround the game's minimap. A large number of addons use this icon to provide quick\r\naccess to their settings or features."}),"\n",(0,t.jsxs)(n.p,{children:["One of the most popular ways to create minimap icons is by using the\r\n",(0,t.jsx)(n.a,{href:"https://www.curseforge.com/wow/addons/libdbicon-1-0/files/305165",children:"LibDBIcon-1.0"}),'\r\nwhich raised the question: should Stormwind Library "reinvent the wheel" and create\r\nits own minimap icon structure or should it use a good existing one?']}),"\n",(0,t.jsxs)(n.p,{children:["The decision was to create its own library to handle minimap icons so developers may\r\nneed to import fewer libraries in order to have a full addon setup. Still,\r\nconsidering that Stormwind Library has its own\r\n",(0,t.jsx)(n.a,{href:"../core/configuration",children:"configuration system"}),", the minimap icon class can use it to\r\npersist the icon's state."]}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.p,{children:"The minimap icon structure is a single class with chained setters to configure it\r\nbefore its creation. The following example will show how to create a minimap icon\r\nand use it to execute callbacks."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local myMinimapIcon = library\r\n    :new('MinimapIcon', 'my-minimap-icon-id')\r\n    :setFirstAnglePosition(45)\r\n    :setIcon('Interface\\\\Icons\\\\INV_Misc_QuestionMark')\r\n    :setCallbackOnLeftClick(function () print('Left button clicked') end)\r\n    :setCallbackOnRightClick(function () print('Right button clicked') end)\r\n    :setTooltipLines({\r\n        'My Addon',\r\n        'Click here to open the settings',\r\n        'Hold SHIFT and drag to move this icon',\r\n    })\r\n    :create()\n"})}),"\n",(0,t.jsx)(n.p,{children:"Here is a breakdown of the methods used in the example:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"setFirstAnglePosition()"}),": sets the first angle position of the icon in\r\n",(0,t.jsx)(n.strong,{children:"degrees"}),". The default value is 225.0. It's important to mention that the\r\nangle represented by 0.0 is the right side (or 3 o'clock, east) of the minimap,\r\nand the angle increases counterclockwise, which means that 90.0 is the top side\r\n(or 12 o'clock, north), 180.0 is the left side (or 9 o'clock, west), and 270.0 is\r\nthe bottom side (or 6 o'clock, south)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"setIcon(string)"}),": sets the icon texture path. The icon texture should",(0,t.jsx)(n.br,{}),"\n","represent a square image, like ",(0,t.jsx)(n.code,{children:"Interface\\\\Icons\\\\INV_Misc_QuestionMark"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"setCallbackOnLeftClick(function)"}),": sets the callback function to be executed\r\nwhen the left mouse button is clicked. If no callback is set, nothing will\r\nhappen when the left mouse button is clicked on the icon."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"setCallbackOnRightClick(function)"}),": sets the callback function to be executed\r\nwhen the right mouse button is clicked. If no callback is set, nothing will\r\nhappen when the right mouse button is clicked on the icon."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"setTooltipLines(table)"}),": sets the tooltip lines to be displayed when the mouse\r\nhovers over the icon. The table should contain strings with the text to be\r\ndisplayed. When no tooltip is set, the default tooltip lines will be the addon\r\nname and a quick description of how to move the icon."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"moving-the-icon",children:"Moving the icon"}),"\n",(0,t.jsx)(n.p,{children:"The default way to move the icon is by holding the SHIFT key and dragging it."}),"\n",(0,t.jsxs)(n.p,{children:["In its first version, it's not possible to change that, unless extending the\r\n",(0,t.jsx)(n.code,{children:"MinimapIcon"})," class and overriding the script callbacks. This feature may be\r\nimplemented in future versions, depending on the feedback received."]}),"\n",(0,t.jsx)(n.h2,{id:"showing-and-hiding-the-minimap-icon",children:"Showing and hiding the minimap icon"}),"\n",(0,t.jsxs)(n.p,{children:["In the World of Warcraft API, frames have the ",(0,t.jsx)(n.code,{children:"Show()"})," and ",(0,t.jsx)(n.code,{children:"Hide()"})," methods to\r\ncontrol the frame visibility. Although the ",(0,t.jsx)(n.code,{children:"MinimapIcon"})," class has the same\r\nmethods, they're used internally as the class exposes the ",(0,t.jsx)(n.code,{children:"setVisibility()"}),"\r\nmethod that accepts a boolean value to show or hide it."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)(n.strong,{children:["Addons should always use ",(0,t.jsx)(n.code,{children:"setVisibility()"})]})," to show or hide the minimap icon as\r\nthey persist the frame visible state between interface reloads. In other words, if\r\nusers hide the icon, the library will save this state and when the game interface\r\nis reloaded, the icon will remain hidden."]}),"\n",(0,t.jsx)(n.h2,{id:"persisting-the-icon-state",children:"Persisting the icon state"}),"\n",(0,t.jsx)(n.p,{children:"The minimap icon class uses the configuration system to persist the icon's state."}),"\n",(0,t.jsxs)(n.p,{children:["That means that the icon's position and visibility are automatically saved as a\r\n",(0,t.jsx)(n.a,{href:"../core/configuration",children:"global setting"})," as long as the addon instantiates the\r\nlibrary with a ",(0,t.jsx)(n.a,{href:"../core/addon-properties#data",children:"table of settings"}),". So it's highly\r\nrecommended to use the configuration system to persist the icon's state, otherwise\r\nplayers will lose their icon's position and visibility every time they reload the UI."]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>c});var t=i(6540);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);