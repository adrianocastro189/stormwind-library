"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3307],{3861:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var i=n(4848),o=n(8453);const s={},a="Window",r={id:"resources/views/window",title:"Window",description:"Working with frames in the World of Warcraft API usually envolves a lot of",source:"@site/docs/resources/views/window.md",sourceDirName:"resources/views",slug:"/resources/views/window",permalink:"/docs/resources/views/window",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/resources/views/window.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"View Constants",permalink:"/docs/resources/views/constants"},next:{title:"Testing",permalink:"/docs/category/testing"}},d={},l=[{value:"How to create and show a window",id:"how-to-create-and-show-a-window",level:2},{value:"Showing and hiding the window",id:"showing-and-hiding-the-window",level:2},{value:"Adding content to the window",id:"adding-content-to-the-window",level:2},{value:"Window persistent state",id:"window-persistent-state",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"window",children:"Window"}),"\n",(0,i.jsx)(t.p,{children:"Working with frames in the World of Warcraft API usually envolves a lot of\r\ncode to create, position, manage, add scrollbars, persist state between\r\ninterface reloads, and so on."}),"\n",(0,i.jsx)(t.p,{children:"Although the game frames are flexible and powerful, they can be a bit\r\noverwhelming for developers who just want to create a simple window to show\r\nsome information and simple controls for players."}),"\n",(0,i.jsxs)(t.p,{children:["When a simple window with basic features is needed, the ",(0,i.jsx)(t.code,{children:"Window"})," class can be\r\nused or extended to create a new window and add it to the game interface."]}),"\n",(0,i.jsx)(t.p,{children:"The Stormwind Library provides a simple way to create windows with basic\r\nfeatures, like:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Showing a title"}),"\n",(0,i.jsx)(t.li,{children:"Showing a close button"}),"\n",(0,i.jsx)(t.li,{children:"Resizing and moving the window"}),"\n",(0,i.jsx)(t.li,{children:"Limiting the window size"}),"\n",(0,i.jsx)(t.li,{children:"Adding a scrollbar to the main window content"}),"\n",(0,i.jsx)(t.li,{children:"Persisting the window position and size between interface reloads"}),"\n",(0,i.jsx)(t.li,{children:"An easy way to attach frames to the window with a vertical layout"}),"\n",(0,i.jsx)(t.li,{children:"More to come..."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"how-to-create-and-show-a-window",children:"How to create and show a window"}),"\n",(0,i.jsxs)(t.p,{children:["Although ",(0,i.jsx)(t.code,{children:"Window"})," can be extended to create more complex windows, this article\r\nwill focus on how to instantiate and show a simple window."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:"local window = library\r\n    :new('Window', 'my-window-id')\r\n    :create()\n"})}),"\n",(0,i.jsx)(t.p,{children:"And that's it! The code above will create a blank window at the center of the\r\nscreen with a default size that's probably smaller than you want, but it will\r\nbe enough to get you started."}),"\n",(0,i.jsx)(t.p,{children:"Now, let's see how to create the same window with a bit more customization:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:"local window = library\r\n    :new('Window', 'my-window-id')\r\n    :setTitle('My Window')\r\n    :setFirstPosition('CENTER', 'CENTER', 0, 0)\r\n    :setFirstSize(250, 400)\r\n    :setFirstVisibility(true)\r\n    :create()\n"})}),"\n",(0,i.jsx)(t.p,{children:"Although the code above uses some default values, it shows how to set the\r\nwindow title, position, size, and initial visibility."}),"\n",(0,i.jsx)(t.h2,{id:"showing-and-hiding-the-window",children:"Showing and hiding the window"}),"\n",(0,i.jsxs)(t.p,{children:["In the World of Warcraft API, frames have the ",(0,i.jsx)(t.code,{children:"Show()"})," and ",(0,i.jsx)(t.code,{children:"Hide()"})," methods to\r\ncontrol the frame visibility. Although the ",(0,i.jsx)(t.code,{children:"Window"})," class has the same\r\nmethods, they're used internally as the class exposes the ",(0,i.jsx)(t.code,{children:"setVisibility()"}),"\r\nmethod that accepts a boolean value to show or hide the window."]}),"\n",(0,i.jsxs)(t.p,{children:["Addons should use the ",(0,i.jsx)(t.code,{children:"setVisibility()"})," method to show or hide the window as\r\nthey persist the window visible state between interface reloads. In other\r\nwords, if users close the window, the library will save this state and when\r\nthe game interface is reloaded, the window will be hidden."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:"-- consider a window instance created by\r\nlocal window = library:new('Window', 'my-window-id')\r\n\r\n-- hides the window\r\nwindow:setVisibility(false)\r\n\r\n-- shows the window\r\nwindow:setVisibility(true)\n"})}),"\n",(0,i.jsx)(t.h2,{id:"adding-content-to-the-window",children:"Adding content to the window"}),"\n",(0,i.jsx)(t.p,{children:"One of the motivations to create the Window class was to provide an easy way\r\nto add content that was also wrapped by a vertical scroll bar in case it's\r\nbig enough to overflow the window."}),"\n",(0,i.jsxs)(t.p,{children:["That said, the class has a ",(0,i.jsx)(t.code,{children:"setContent()"})," method that accepts a table of\r\nframes that will be ",(0,i.jsx)(t.strong,{children:"automatically positioned"})," in the content area from top\r\nto bottom and width that's bound to the window width."]}),"\n",(0,i.jsx)(t.p,{children:'That way, addons can add frames to the window content without worrying about\r\npositioning them as long as they pass the frames in the right order and\r\nrespect a few rules. Let\'s call them "inner frames".'}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Inner frames shouldn't be created with a width as they'll occupy the whole\r\ncontent area width. ",(0,i.jsx)(t.strong,{children:"Consider them blocks that will be stacked vertically!"})]}),"\n",(0,i.jsxs)(t.li,{children:["The addon must be responsible for hiding the inner frames in case it must\r\nupdate the whole content area. The library doesn't manage the inner frames\r\n(",(0,i.jsx)(t.strong,{children:"at least in the current version"}),")."]}),"\n"]}),"\n",(0,i.jsxs)(t.admonition,{title:"Free inner frames layout",type:"info",children:[(0,i.jsx)(t.p,{children:(0,i.jsx)(t.em,{children:"What if my addon needs to add inner frames freely that don't behave as\r\nblocks?"})}),(0,i.jsxs)(t.p,{children:["It's totally possible, as\r\nthe ",(0,i.jsx)(t.code,{children:"contentFrame"})," is a public property of the ",(0,i.jsx)(t.code,{children:"Window"})," class and can be used\r\nto position frames. The ",(0,i.jsx)(t.code,{children:"setContent()"})," method is just a helper to add frames\r\nas blocks, but it's not mandatory to use it."]})]}),"\n",(0,i.jsx)(t.p,{children:"See this example on how to add inner frames that behave as blocks to the\r\nwindow content area:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:"local window = library:new('Window', 'my-window-id')\r\n    -- :chained method as described above\r\n    :create()\r\n\r\nlocal settingsBlock = CreateFrame('Frame', nil, window.contentFrame, \"BackdropTemplate\")\r\nsettingsBlock:SetHeight(35)\r\nsettingsBlock:SetBackdrop(...)\r\nsettingsBlock:SetBackdropColor(...)\r\n-- any other visual settings method calls\r\n\r\nlocal optionsBlock = CreateFrame('Frame', nil, window.contentFrame, \"BackdropTemplate\")\r\noptionsBlock:SetHeight(100)\r\n-- any other visual settings method calls\r\n\r\nlocal notesBlock = ...\r\n\r\n-- this will add the blocks to the window content area where each block will\r\n-- occupy the whole width and be stacked vertically\r\nwindow:setContent({ settingsBlock, optionsBlock, notesBlock })\n"})}),"\n",(0,i.jsxs)(t.admonition,{title:"Keep an eye on this documentation",type:"note",children:[(0,i.jsx)(t.p,{children:"The philosophy behind the library is to grow organically based on addons\r\ndemands and developers feedback."}),(0,i.jsxs)(t.p,{children:["It's most likely that the ",(0,i.jsx)(t.code,{children:"Window"})," class will have more features in the future\r\nand this documentation will be updated to reflect those changes. Make sure to\r\ncheck the ",(0,i.jsx)(t.a,{href:"../../changelog",children:"changelog"})," frequently to see what's new."]})]}),"\n",(0,i.jsx)(t.h2,{id:"window-persistent-state",children:"Window persistent state"}),"\n",(0,i.jsxs)(t.p,{children:["On the example above, look at ",(0,i.jsx)(t.code,{children:"id"})," parameter passed to the ",(0,i.jsx)(t.code,{children:"Window"}),"\r\nconstructor. This id is used to persist the window state between interface\r\nreloads and that's automatically done by the library. However, for that to\r\nwork, the window id must be unique, and the library must be instantiated with the ",(0,i.jsx)(t.code,{children:"data"})," property (",(0,i.jsx)(t.a,{href:"../core/addon-properties#data",children:"read more about that here"}),")."]}),"\n",(0,i.jsxs)(t.p,{children:["In case the addon passes the ",(0,i.jsx)(t.code,{children:"data"})," property to the library initialization,\r\nit will have a ",(0,i.jsx)(t.a,{href:"../core/configuration",children:"configuration manager"})," that will store\r\nthe window size, position, visibility, etc, between interface reloads."]}),"\n",(0,i.jsxs)(t.p,{children:["That's why most of the setters start with ",(0,i.jsx)(t.code,{children:"setFirst"})," instead of just ",(0,i.jsx)(t.code,{children:"set"}),'.\r\nBecause that means the library will use the first value set to the window for\r\nits initial state. After that, the window state will be managed by the\r\nlibrary configuration manager. Which means, at the moment a player moves,\r\nresizes, closes, etc, the window, it will save its state in a saved variable\r\nmanaged by the library configuration instance and once the frame is shown\r\nagain, the "first values" will be ignored and the ones saved will be used.']}),"\n",(0,i.jsxs)(t.p,{children:["By default, the window state will be saved in the global context, meaning that\r\nplayers will share the same window state. However, the library allows the\r\naddon to save the window state in the character context by calling\r\n",(0,i.jsx)(t.code,{children:"Window:setPersistStateByPlayer(true)"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:"-- if a player changes the window size, position, visibility, etc, the window\r\n-- state will be reflected for any other players in the same account\r\nlocal sharedWindow = library\r\n    :new('Window', 'window-id')\r\n    :create()\r\n\r\n-- in this case, the window state will be saved for each player separately\r\nlocal playerWindow = library\r\n    :new('Window', 'window-id')\r\n    :setPersistStateByPlayer(true)\r\n    :create()\n"})}),"\n",(0,i.jsxs)(t.admonition,{title:"Set persistence before creating the window",type:"warning",children:[(0,i.jsxs)(t.p,{children:["Due to how windows are built and have their properties managed, the\r\n",(0,i.jsx)(t.code,{children:"create()"})," method will get the state before rendering the frames."]}),(0,i.jsxs)(t.p,{children:["That means that\r\nthe ",(0,i.jsx)(t.code,{children:"setPersistStateByPlayer()"})," method must be called before ",(0,i.jsx)(t.code,{children:"create()"}),",\r\notherwise, the window state will be initially loaded from the global context\r\nand then persisted in the player context, having no effects on subsequent\r\ninterface reloads."]})]})]})}function c(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var i=n(6540);const o={},s=i.createContext(o);function a(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);